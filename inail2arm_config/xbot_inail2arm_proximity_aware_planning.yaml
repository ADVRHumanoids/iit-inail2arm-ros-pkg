XBotInterface:
  urdf_path: $(rospack find inail2arm_urdf)/urdf/inail2arm.urdf
  srdf_path: $(rospack find inail2arm_srdf)/srdf/inail2arm.srdf

ModelInterface:
  model_type: "RBDL"
  is_model_floating_base: "false"

# hal
xbotcore_device_configs:
    sim: $(rospack find inail2arm_config)/hal/inail2arm_gz.yaml
    dummy: $(rospack find inail2arm_config)/hal/inail2arm_dummy.yaml

# threads
xbotcore_threads:
    rt_main:  {sched: fifo , prio: 60, period: 0.001}
    nrt_main: {sched: other, prio: 0 , period: 0.005}
    nrt_control: {sched: other, prio: 0, period: 0.005, core_id: 3}

# plugins
xbotcore_plugins:

    ros_io: 
        thread: nrt_main
        type: ros_io
        params: 
            publish_tf: {type: bool, value: true}
            pub_ros_joint_state: {type: bool, value: true}
        
    ros_control: {thread: nrt_main, type: ros_control, params: {autostart: {type: bool, value: true}}}
    
    homing:
        thread: nrt_control
        type: homing_utility # side homing
        params:
           qhome: {value: [0.0,-0.8,-1.7,0.0,0.6,0.0], type: Eigen::VectorXd} # 6 arm(6)
           time: {value: 4.0, type: double}
           xbot_old_version: {value: true, type: bool}

    proximity_aware_planner:
        thread: nrt_control
        type: proximityAwarePlannerPlugin
        params:
           n_sensors: {value: 6, type: int} # meter
           n_sensors_frame_name: {value: [teraflex_1_sensor1_link,teraflex_1_sensor2_link,teraflex_1_sensor3_link,teraflex_1_sensor4_link,teraflex_1_sensor5_link,teraflex_1_sensor6_link], type: vector<string>} # as in urdf model
           n_sensors_base_frame: {value: base_link, type: string}
           sensors_axis: {value: [1,0,0], type: Eigen::VectorXd}
           sensors_limit_min: {value: 0.05, type: double}
           sensors_limit_max: {value: 2.0, type: double}
           sensors_safe_distance: {value: 0.15, type: double}
           sensors_var_resolution: {value: 0.01, type: double}
           sensors_sub_topic_name: {value: /ranges, type: string}
           abilitate_sensors_filtering: {value: false, type: bool}
           damping_sensors_filtering: {value: 0.8, type: double}
           bandwidth_sensors_filtering: {value: 0.3, type: double}
           correction_abilitation: {value: true, type: bool}
           correction_smoothing_time: {value: 1.0, type: double}
           task_name: {value: arm_control, type: string} # as cartesio
           task_tip_link_name: {value: arm1_6, type: string} # aas cartesio
           task_base_link_name: {value: base_link, type: string} # as cartesio
           task_robot_chain_name: {value: arm, type: string} # as in srdf
           task_sub_topic_name: {value: /target_pose, type: string}
           task_trajectory_point_sub_topic_name: {value: /goal_cartesian_trajTEM, type: string}
           task_trajectory_way_point_sub_topic_name: {value: /goal_cartesian_traj, type: string}
           cartesio_solver_name: {value: OpenSot, type: string}
           control_loop: {value: 0.005, type: double}
           cartesio_SoT_path: {value: $(rospack find inail2arm_cartesio)/config/inail2arm_proximity_aware_planning.yaml, type: file}
           plot_pub_sensors_data: {value: /sensors_data, type: string} # ideally for plotJogger
           plot_pub_robot_pose: {value: /robot_target_pose, type: string}
           plot_pub_fm_planned_pose: {value: /fm_planner_target_pose, type: string}
           plot_pub_correction_pose: {value: /correction_target_pose, type: string}
           logger_path: {value: /tmp/, type: string}
           logger_buffer_mode: {value: false, type: bool}
           xbot_old_version: {value: true, type: bool}
           model_wheels_names: {value: [], type: vector<string>}
           enabled_chains: {value: ['arm'], type: vector<string>}


    target_sender:
        thread: nrt_control
        type: targetSender
        params:
          task_name: {value: [arm_control], type: vector<string>} # as in cartesio stack
          task_pose: {value: [0.5217938,5.14196e-06,0.312541,-0.510355,0.483141,0.489549,0.516193], type: vector<double>} # [x,y,z,qx,qy,qz,qw] 
          task_wrench: {value: [0.0,0.0,0.0,10.0,10.0,10.0], type: vector<double>}
          task_desired_error: {value: [0.01,0.05,0.01,0.01,0.01,0.01], type: vector<double>}
          task_time: {value: [20.0], type: vector<double>}
          error_modulation_mode: {value: 1.0, type: double} # 0:exp-1:distance_driven
          wrench_modulation_mode: {value: 1.0, type: double} # 0:exp-1:recoverywrench
          contact_driven: {value: 0.0, type: double} # 0:false-1:true
          target_elements: {value: 7.0, type: double}
          n_targets: {value: 1.0, type: double}
          loop_targets: {value: 0.0, type: double}
          are_degrees: {value: 0.0, type: double}
          topic_name: {value: /target_pose, type: string}


    target_sender_back:
        thread: nrt_control
        type: targetSender
        params:
          task_name: {value: [arm_control], type: vector<string>} # as in cartesio stack
          task_pose: {value: [0.0217938,5.14196e-06,0.712541,-0.510355,0.483141,0.489549,0.516193], type: vector<double>} # [x,y,z,qx,qy,qz,qw]
          task_wrench: {value: [0.0,0.0,0.0,10.0,10.0,10.0], type: vector<double>}
          task_desired_error: {value: [0.01,0.05,0.01,0.01,0.01,0.01], type: vector<double>}
          task_time: {value: [20.0], type: vector<double>}
          error_modulation_mode: {value: 1.0, type: double} # 0:exp-1:distance_driven
          wrench_modulation_mode: {value: 1.0, type: double} # 0:exp-1:recoverywrench
          contact_driven: {value: 0.0, type: double} # 0:false-1:true
          target_elements: {value: 7.0, type: double}
          n_targets: {value: 1.0, type: double}
          loop_targets: {value: 0.0, type: double}
          are_degrees: {value: 0.0, type: double}
          topic_name: {value: /target_pose, type: string}

    target_recorder:
        thread: nrt_control
        type: targetRecorder
        params:
            robot_chain_name: {value: arm, type: string} # name chain in srdf
            tip_link_name: {value: arm1_6, type: string} # name chain in srdf
            base_link_name: {value: base_link, type: string} # name chain in srdf
            orientation_representation: {value: quat, type: string} # eulRad - eulDeg - quat

# global parameters
xbotcore_param:
    /jm/tx_filter_autostart: {value: true, type: bool}
    /jm/tx_filter_cutoff: {value: 2.0, type: double}
    /jm/enable_safety: {value: true, type: bool}
    /xbot/hal/joint_safety/filter_autostart: {value: true, type: bool}
    /xbot/hal/joint_safety/filter_cutoff_hz: {value: 2.0, type: double}
    /xbot/hal/enable_safety: {value: true, type: bool}
    /xbot_internal/ros_io/call_timeout: {value: 1.0, type: chrono}
    /rt_main/memory_hooks: {value: true, type: bool}




