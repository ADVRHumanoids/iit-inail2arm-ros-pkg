# Settings for ros_control control loop
hardware_control_loop:
   loop_hz: &loop_hz 100

# Settings for ros_control hardware interface
inail2arm_hardware_interface:
   joints: &robot_joints
    - j_arm1_1
    - j_arm1_2
    - j_arm1_3
    - j_arm1_4
    - j_arm1_5
    - j_arm1_6

################ To publish all joint states to /joint_states topic ----------------------------------
joint_state_controller:
   type:         joint_state_controller/JointStateController
   publish_rate: *loop_hz
   
################ POSITION CONTROLLERS (they use a position hardware interface) ################################## 
# Joint Trajectory Controller - position based -------------------------------
# For detailed explanations of parameter see http://wiki.ros.org/joint_trajectory_controller
scaled_pos_joint_traj_controller:
   type: position_controllers/ScaledJointTrajectoryController
   joints: *robot_joints
   constraints:
      goal_time: 0.6
      stopped_velocity_tolerance: 0.05
      j_arm1_1: {trajectory: 0.2, goal: 0.1}
      j_arm1_2: {trajectory: 0.2, goal: 0.1}
      j_arm1_3: {trajectory: 0.2, goal: 0.1}
      j_arm1_4: {trajectory: 0.2, goal: 0.1}
      j_arm1_5: {trajectory: 0.2, goal: 0.1}
      j_arm1_6: {trajectory: 0.2, goal: 0.1}
   stop_trajectory_duration: 0.5
   state_publish_rate: *loop_hz
   action_monitor_rate: 20
    
pos_joint_traj_controller:
   type: position_controllers/JointTrajectoryController
   joints: *robot_joints
   constraints:
      goal_time: 0.6
      stopped_velocity_tolerance: 0.05
      j_arm1_1: {trajectory: 0.2, goal: 0.1}
      j_arm1_2: {trajectory: 0.2, goal: 0.1}
      j_arm1_3: {trajectory: 0.2, goal: 0.1}
      j_arm1_4: {trajectory: 0.2, goal: 0.1}
      j_arm1_5: {trajectory: 0.2, goal: 0.1}
      j_arm1_6: {trajectory: 0.2, goal: 0.1}
   stop_trajectory_duration: 0.5
   state_publish_rate: *loop_hz
   action_monitor_rate: 20
   
#j_arm1_1_joint_controller:
   #type: position_controllers/JointPositionController
   #joint: j_arm1_1
   
pos_joint_controller:
   type: position_controllers/JointGroupPositionController
   joints: *robot_joints


#pose_based_cartesian_traj_controller:
    #type: pose_controllers/CartesianTrajectoryController

    #UR driver convention
    #base: base
    #tip: tool0_controller
    #joints: *robot_joints

#joint_based_cartesian_traj_controller:
    #type: position_controllers/CartesianTrajectoryController

    #UR driver convention
    #base: base
    #tip: tool0
    #joints: *robot_joints


##################################### JOINT SOFT LIMITS #######################################
#https://github.com/ros-controls/ros_control/wiki/joint_limits_interface
#http://wiki.ros.org/pr2_controller_manager/safety_limits    
# you can also put the hard limits here, to override the one taken from urdf by xbot
joint_limits:
   j_arm1_1:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.85
      #max_position: 2.85
      #max_velocity: 3.86
      #max_effort: 147.00
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -2.8
      soft_upper_limit: 2.8
   j_arm1_2:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.0
      #max_position: 2.0
      #max_velocity: 3.86
      #max_effort: 147.00
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -1.95
      soft_upper_limit: 1.95
   j_arm1_3:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.2
      #max_position: 2.2
      #max_velocity: 6.06
      #max_effort: 147.00
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -2.15
      soft_upper_limit: 2.15
   j_arm1_4:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.7
      #max_position: 2.7
      #max_velocity: 6.06
      #max_effort: 147.00
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -2.65
      soft_upper_limit: 2.65
   j_arm1_5:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.2
      #max_position: 2.2
      #max_velocity: 11.72
      #max_effort: 55.0
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -2.15
      soft_upper_limit: 2.15
   j_arm1_6:
      has_position_limits: true
      has_velocity_limits: true
      has_acceleration_limits: false
      has_effort_limits: true
      has_jerk_limits: false
      ##hard limits, will override urdf ones
      #min_position: -2.85
      #max_position: 2.85
      #max_velocity: 11.72
      #max_effort: 55.0
      ##soft limits
      has_soft_limits: true
      k_position: 5
      k_velocity: 0.5 #it seems not used but it is necessary
      soft_lower_limit: -2.8
      soft_upper_limit: 2.8


